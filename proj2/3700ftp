#!/usr/bin/env python3

import argparse
import os
import socket
import ssl
from urllib.parse import urlparse

class Connection:
    def __init__(self, sock, host, path, port, user, pwd, local):
        self.sock = sock
        self.host = host
        self.path = path
        self.port = port
        self.user = user
        self.pwd = pwd
        self.local = local

# Receives full response from the given socket ending at \r\n 
# Returns a list of messages
def receiveMessage(socket):
    data = ""
    while not data.endswith("\r\n"):
        data += socket.recv(8192).decode("utf-8")
    return data

# Receives data from the given socket
# Returns data in the form of bytes
def receiveData(socket):
    allData = ""
    while True:
        data = socket.recv(8192).decode("utf-8")
        if not data: 
            break
        allData += data
    return allData

# Checks if the given string begins with a 4 5 or 6, denoting an error
# Returns a boolean
def checkForErrors(response):
    print(response)
    if response.startswith('4') or response.startswith('5') or response.startswith('6'):
        exit()

# Sends AUTH command to the server via the given socket
def auth(sock):
    print("\nDEBUG: Sending", "\"AUTH TLS\\r\\n\"")
    sock.sendall(b"AUTH TLS\r\n")
    checkForErrors(receiveMessage(sock))

# Wraps given socket in TLS
def wrapSocket(sock, hostname):
    context = ssl.create_default_context()
    return context.wrap_socket(sock, server_hostname=hostname)

# Sends USER and (if necessary) the PASS command to the server via the given socket
def login(sock, username, password):

    print("\nDEBUG: Sending", f"\"USER {username}\\r\\n\"")
    sock.sendall(f"USER {username}\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

    if (password != ""):
        print("\nDEBUG: Sending", f"\"PASS {password}\\r\\n\"")
        sock.sendall(f"PASS {password}\r\n".encode("utf-8"))
        checkForErrors(receiveMessage(sock))

# Sends PBSZ command to the server via the given socket
def pbsz(sock):
    print("\nDEBUG: Sending", "\"PBSZ 0\\r\\n\"")
    sock.sendall("PBSZ 0\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends PROT command to the server via the given socket
def prot(sock):

    print("\nDEBUG: Sending", "\"PROT P\\r\\n\"")
    sock.sendall("PROT P\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends TYPE command to the server via the given socket
def type(sock):
    print("\nDEBUG: Sending", "\"TYPE I\\r\\n\"")
    sock.sendall("TYPE I\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends MODE command to the server via the given socket
def mode(sock):
    print("\nDEBUG: Sending", "\"MODE S\\r\\n\"")
    sock.sendall("MODE S\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends STRU command to the server via the given socket
def stru(sock):
    print("\nDEBUG: Sending", "\"STRU F\\r\\n\"")
    sock.sendall("STRU F\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends LIST command to the server via the given socket
def list(ctrlSock, path, ctrlHostname):
    dataInfo = pasv(ctrlSock)

    print("\nDEBUG: Sending", f"\"LIST {path}\\r\\n\"")
    ctrlSock.sendall(f"LIST {path}\r\n".encode("utf-8"))
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as dataSock:
        
        dataSock.connect((dataInfo[0], dataInfo[1]))
        checkForErrors(receiveMessage(ctrlSock))

        dataSock = wrapSocket(dataSock, ctrlHostname)

        checkForErrors(receiveMessage(dataSock))

        dataSock.unwrap().close()

    checkForErrors(receiveMessage(ctrlSock))

# Sends DELE command to the server via the given socket
def dele(sock, path):
    print("\nDEBUG: Sending", f"\"DELE {path}\\r\\n\"")
    sock.sendall(f"DELE {path}\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends MKD command to the server via the given socket
def mkd(sock, path):
    print("\nDEBUG: Sending", f"\"MKD {path}\\r\\n\"")
    sock.sendall(f"MKD {path}\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends RMD command to the server via the given socket
def rmd(sock, path):
    print("\nDEBUG: Sending", f"\"RMD {path}\\r\\n\"")
    sock.sendall(f"RMD {path}\r\n".encode("utf-8"))
    checkForErrors(receiveMessage(sock))

# Sends STOR command to the server via the given socket
def stor(ctrlSock, destination, ctrlHostname, file):
    dataInfo = pasv(ctrlSock)

    type(ctrlSock)
    stru(ctrlSock)
    mode(ctrlSock)

    print("\nDEBUG: Sending", f"\"STOR {destination}\\r\\n\"")
    ctrlSock.sendall(f"STOR {destination}\r\n".encode("utf-8"))
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as dataSock:
        
        dataSock.connect((dataInfo[0], dataInfo[1]))
        checkForErrors(receiveMessage(ctrlSock))

        dataSock = wrapSocket(dataSock, ctrlHostname)

        dataSock.sendall(bytes(file.read().encode("utf-8")))

        dataSock.unwrap().close()

    checkForErrors(receiveMessage(ctrlSock))

# Sends RETR command to the server via the given socket and writes data to given file object
def retr(ctrlSock, destination, ctrlHostname, file):
    # Send PASV and receive data channel hostname and port
    dataInfo = pasv(ctrlSock)

    # rewuite I/O commands
    type(ctrlSock)
    stru(ctrlSock)
    mode(ctrlSock)

    # send 
    ctrlSock.sendall(f"RETR {destination}\r\n".encode("utf-8"))
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as dataSock:
        
        dataSock.connect((dataInfo[0], dataInfo[1]))
        checkForErrors(receiveMessage(ctrlSock))

        dataSock = wrapSocket(dataSock, ctrlHostname)

        data = receiveData(dataSock)
        file.write(data)

        dataSock.unwrap().close()

    checkForErrors(receiveMessage(ctrlSock))

# Sends QUIT command to the server via the given socket
def quit(sock):
    print("\nDEBUG: Sending", "\"QUIT\\r\\n\"")
    sock.sendall("QUIT\r\n".encode("utf-8"))
    print(receiveMessage(sock))
    sock.close()

# Sends PASV command to the server via the given socket
# Returns a tuple of (host, port)
def pasv(sock):

    print("\nDEBUG: Sending", "\"PASV\\r\\n\"")
    sock.sendall("PASV\r\n".encode("utf-8"))
    response = receiveMessage(sock)
    checkForErrors(response)

    return parsePasvResponse(response)

# Takes in the string received from the server following a PASV command
# Returns a tuple containing the received ip and port
def parsePasvResponse(msg):
    msg = (msg[27:-4])
    temp = msg.split(',')

    rIp = ".".join(temp[0:4])
    rPort = (int(temp[4]) << 8) + int(temp[5])
    return (rIp, rPort)

# Does all the requisite connecting and setting up of the socket
def establishConnection(sock, host, path, port, user, pwd):

    sock.connect((host, port))
    checkForErrors(receiveMessage(sock))
    auth(sock)
    sock = wrapSocket(sock, host)
    login(sock, user, pwd)
    pbsz(sock)
    prot(sock)

    return Connection(sock, host, path, port, user, pwd, local)


parser = argparse.ArgumentParser()

parser.add_argument("operation", help="The operation to execute. Valid operations are 'ls', 'rm', 'rmdir','mkdir', 'cp', and 'mv'")
parser.add_argument("params", nargs='+', help="Parameters for the given operation. Will be one or two paths and/or URLs.")
args = parser.parse_args()

oper = args.operation
connects = []
urls = []

# builds a lists of parsed url's
for url in args.params:
    urls.append(urlparse(url))
# trims extra unnecessary parameters
if len(urls) > 2: 
    urls = urls[:2]

for url in urls:
    # determines locality
    local = False if url.scheme else True
    # stores path
    path = url.path if url.path != "" else "/"

    # populates attributes and creates a Connection if url is remote
    if (not local):
        host = url.hostname.split(":", 1)[0]
        port = url.port if url.port else 21
        user = url.username if url.username else "anonymous"
        pwd = url.password if url.password else ""

        print("DEBUG: host:", host, "port:", port)
        print("DEBUG: user:", user, "pass:", pwd, "\n")

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            connects.append(establishConnection(sock, host, path, port, user, pwd))
    else: # otherwise creates a connection representing  
        connects.append(Connection(0, 0, path, 0, 0, 0, local))

url1 = connects[0]
if len(urls) > 1: url2 = connects[1] 

if oper == 'mkdir':
    mkd(url1.sock, url1.path)
    quit(url1.sock)
    
elif oper == 'rmdir':
    rmd(url1.sock, url1.path)
    quit(url1.sock)

elif oper == 'ls':
    list(url1.sock, url1.path, url1.host)
    quit(url1.sock)

elif oper == 'rm':
    dele(url1.sock, url1.path)
    quit(url1.sock)

elif oper == 'cp':
    file = ''
    if (url1.local):
        # open target file to be read
        file = open(url1.path, "r")

        # upload target file to remote destination
        stor(url2.sock, url2.path, url2.host, file)

        file.close()

        quit(url2.sock)
    elif (url2.local):
        # open destination file to be written to
        file = open(url2.path, "w")

        # retrieve target file from server and (over)write to it
        retr(url1.sock, url1.path, url1.host, file)

        file.close()

        quit(url1.sock)
elif oper == 'mv':
    file = ''
    if (url1.local):
        # open target file to be read
        file = open(url1.path, "r")

        # upload target file to remote destination
        stor(url2.sock, url2.path, url2.host, file)

        file.close()

        # remove target file afterwards
        os.remove(url1.path)

        quit(url2.sock)

    elif (url2.local):
        # open destination file to be written to
        file = open(url2.path, "w")

        # retrieve target file from server and (over)write to it
        retr(url1.sock, url1.path, url1.host, file)

        file.close()

        # remove target file afterwards
        dele(url1.sock, url1.path)

        quit(url1.sock)
else:
    print("ERROR: invalid operation")